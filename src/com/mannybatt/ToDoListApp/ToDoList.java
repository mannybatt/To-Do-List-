package com.mannybatt.ToDoListApp;

import java.util.LinkedList;
import java.util.List;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.IndexColumn;

/**
 * <h1> ToDoList Object </h1>
 * The almighty To-Do List Object. This based around a 
 * linked list and uses a mix of built-in and custom
 * methods to control the list items. This is also optimized
 * to take advantage of Hibernate persistence via annotations.
 * <p>
 * @author Manny Batt  
 * @version 1.0
 *
 */
@XmlRootElement
@Entity
@Table(name="list")
public class ToDoList {

	//Create variables
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	@Column
	private int id;

	@SuppressWarnings("deprecation")
	@ElementCollection
	@CollectionTable(name="users_list", joinColumns=@JoinColumn(name="list_id"))
	@Column(name="list_items")
	@IndexColumn(name="indx")
	private List<String> todoList = new LinkedList<String>();

	@Column(name = "list_size")
	private int listSize = 0;

	
	// Honest Getters and Setters 

	public ToDoList() {
		todoList = new LinkedList<String>();
	}

	public List<String> getTodoList() {
		return todoList;
	}

	public  int getListSize() {
		return listSize;
	}

	public void setListSize(int listSize) {
		this.listSize = listSize;
	}

	
	/**
	 * Adds an item to the ToDoList.
	 * @param input String to add.
	 * @return String indicating success/failure.
	 */
	public String addItem(String input) {
		if (!input.equals("")) {
			todoList.add(input);
			listSize = todoList.size();
			return "Successfully added!";
		} else {
			return "Invalid input!";
		}
	}

	/**
	 * Deletes an item from the ToDoList
	 * @param Choice as int.
	 * @return String indicating success/failure.
	 */
	public String deleteItem(int choice) {
		if ((choice >= 0) && (choice < listSize)) {
			todoList.remove(choice);
			return ("Succesfully deleted (" + (choice + 1) + ") from list.\n\n");
		} else {
			return ("Invalid Input!\n");
		}
	}	

	/**
	 * Check to see if the list is empty and 
	 * returns a corresponding answer.
	 * @return Boolean containing answer.
	 */
	public boolean isListEmpty() {
		if (todoList.size() < 1) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Returns an array of objects representing
	 * the ToDoList Objects.
	 * @return Object Array.
	 */
	public Object[] arrayOut() {
		return todoList.toArray();
	}

	/**
	 * Returns the ID generated by Hibernate.
	 * @return ID as int.
	 */
	public int getDaId() {
		return id;
	}
}
